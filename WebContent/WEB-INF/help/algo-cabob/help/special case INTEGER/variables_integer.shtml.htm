<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 3.0//EN//">
<html><head><title>Integer Variables</title>

<link rev="made" href="mailto:Mike.Vevea@nmr.mgh.harvard.edu"></head>

<body>
<h1>Integer Variables</h1>
<p>
In C, there are a variety of kinds of integer variables.  They share the 
ability to represent integers, that is numbers like 0, 1, 2, ...; some kinds 
can represent only non-negative values, some can represent positive or 
negative values.  They come in several sizes, as well as the basic `signed' 
(can represent positive or negative values) and `unsigned' (can't represent 
negative values).  All integer types have an inherent limit to the range of 
values they can represent.  Here's a table that describes all of this, as 
you'll find it on most computer systems, including ours.
</p>
<table border="1">
    <caption>C Integer Variable Types</caption>
    <tbody><tr><th align="right">Type</th><th align="right">MIN</th>
	<th align="right">MAX</th><th align="right">Bytes</th>
    </tr><tr><td align="right">char</td><td align="right">-128</td>
	<td align="right">127</td><td align="right">1</td>
    </tr><tr><td align="right">short</td><td align="right">-32768</td>
	<td align="right">32767</td><td align="right">2</td>
    </tr><tr><td align="right">long</td><td align="right">-2147483648</td>
	<td align="right">2147483647</td><td align="right">4</td>
    </tr><tr><td align="right">unsigned char</td><td align="right">0</td>
	<td align="right">255</td><td align="right">1</td>
    </tr><tr><td align="right">unsigned short</td><td align="right">0</td>
	<td align="right">65535</td><td align="right">2</td>
    </tr><tr><td align="right">unsigned long</td><td align="right">0</td>
	<td align="right">4294967295</td><td align="right">4</td>
    </tr><tr>
    </tr><tr><td align="right">int</td><td align="right">???</td>
	<td align="right">???</td><td align="right">???</td>
    </tr><tr><td align="right">unsigned int</td><td align="right">???</td>
	<td align="right">???</td><td align="right">???</td>
</tr></tbody></table>
<p>
The `int' and `unsigned int' are a special case that I'll discuss in a
bit.  If you look at the rest, you'll see that there are three basic
sizes (1, 2 and 4 bytes), and two basic ways to look at the data
(signed and unsigned).  That gives six different types of variables,
with six different ranges of values that they can represent.  Why so
many?  It is a matter of efficiency:  it doesn't make sense to
waste space, particularly when large arrays of these basic types are
involved (again think of 256 times 256 times 1000 of these!)
</p>
<p>
The `int' and `unsigned int' are a special case.  Each of the others
has a fairly fixed meaning, though they aren't absolutely cast in
stone.  (For example, C implementations on a CDC mainframe used to use
1 60 bit word for all integer types.)  In general, you'll find that
the table I gave you is accurate for any system you're likely to
encounter.  The `int' and `unsigned int' are a special case:  they say
`use either a short or a long, but pick the one which works ``best''
on this particular machine'.  On most 32 bit UNIX systems, you'll find
that an int is equivalent to a long.  But on older UNIX systems (e.g.
the PDP-11, some implementations for the PC), and many other systems
(including many compilers for the PC, particularly the older ones), an
int is equivalent to a short.  The idea is:
</p>
<table border="1">
<tbody><tr><th align="right">Concern</th><th align="right">MIN</th>
    <th align="right">MAX</th><th>Use</th>
</tr><tr><td align="right">memory</td><td align="right">-32768</td>
    <td align="right">32767</td><td align="right">short</td>
</tr><tr><td align="right">memory</td><td align="right">0</td>
    <td align="right">65535</td><td align="right">unsigned short</td>
</tr><tr><td align="right">memory</td><td align="right">&lt; -32768</td>
    <td align="right">&gt; 32767</td><td align="right">long</td>
</tr><tr><td align="right">memory</td><td align="right">0</td>
    <td align="right">&gt; 65535</td><td align="right">unsigned long</td>
</tr><tr><td align="right">speed</td><td align="right">-32768</td>
    <td align="right">32767</td><td align="right">int</td>
</tr><tr><td align="right">speed</td><td align="right">0</td>
    <td align="right">65535</td><td align="right">unsigned int</td>
</tr></tbody></table>
<p>
Note that many people use `int' through habit, even though it may not
be technically correct.  It is esier, and if you `are sure' that you
know where your code will run, it is common to `cheat'.  But be warned
that it can come back to haunt you!  Particularly if you decide to
port to a Mac or PC, which often use 16 bit ints, particularly with
the older compilers
</p>
<hr>
<br>
It was written by Mike Vevea; to reach me, try:
<address>
<a href="mailto:Mike.Vevea@nmr.mgh.harvard.edu">Mike.Vevea@nmr.mgh.harvard.edu</a>
<br>
Or:<br>
Mike Vevea<br>
MGH NMR Center, Room 2301<br>
Bldg 149, 13th St<br>
Charlestown, MA 02129<br>
</address>

</body></html>